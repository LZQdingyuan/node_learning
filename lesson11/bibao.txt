知识点
理解 js 中 var 的作用域
了解闭包的概念
理解 this 的指向



闭包的简单理解  使函数内部可以访问定义在外部函数中的变量
setTimeout中的console.log(i)问题  详情可见   https://www.cnblogs.com/okaychen/p/7806739.html


在《javaScript语言精粹》这本书中，把 this 出现的场景分为四类，简单的说就是：

有对象就指向调用对象
没调用对象就指向全局对象
用new构造就指向新对象
通过 apply 或 call 或 bind 来改变 this 的所指



apply() 方法接受两个参数第一个是函数运行的作用域，另外一个是一个参数数组(arguments)。
call() 方法第一个参数的意义与 apply() 方法相同，只是其他的参数需要一个个列举出来。
简单来说，call 的方式更接近我们平时调用函数，而 apply 需要我们传递 Array 形式的数组给它。它们是可以互相转换的。
var myObject = {value: 100};

var myObject = {value: 100};

var foo = function(){
  console.log(this);
};

foo(); // 全局变量 global
foo.apply(myObject); // { value: 100 }
foo.call(myObject); // { value: 100 }

var newFoo = foo.bind(myObject);
newFoo(); // { value: 100 }